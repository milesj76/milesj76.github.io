import{s as le,x as oe,w as ie,q as re}from"../chunks/scheduler.7d913882.js";import{S as ce,i as de,g as o,s as n,h as i,j as ne,G as l,c as r,f as O,k as a,a as ue,E as s}from"../chunks/index.7d679565.js";import{d as he}from"../chunks/db.f31737d9.js";const pe=""+new URL("../assets/postOptions.4ebc9ad2.png",import.meta.url).href,me=""+new URL("../assets/svelteExample.4107bc6e.png",import.meta.url).href,fe=""+new URL("../assets/connectExample.f13d5870.png",import.meta.url).href;function ve(S){let e,c,z="ReUse Inventory Audit Web App",L,u,F='<p class="svelte-73e0z4">I was the sole developer of ReUse Computers&#39; Inventory Audit Web App. After having improved our inventory systems with the last app I had worked on, we realized we needed a way to audit our inventory to keep it clean, fresh and accountable. Over an intense month of coding, I built a web app that integrated with our Google Sheet&#39;s Inventory.</p>',_,x,d,C,M,h,$='<h4 class="text-lg font-semibold mb-2">Responsibilities</h4> <ul class="w-full grid grid-cols-3 grid-flow-row list-disc px-4"><li>JavaScript</li> <li>Google Sheets API</li> <li>Sveltekit</li> <li>Responsive Design</li> <li>API Design</li> <li>REST API</li> <li>Testing</li> <li>API Endpoint Testing</li> <li>Visual Studio Code</li> <li>Node.js</li></ul>',q,p,B='<p class="svelte-73e0z4">Before this app, there didn&#39;t exist any sort of audit process or tools for ReUse Computers. As we were a small business, it just wasn&#39;t something we&#39;d taken any time to establish. I took it upon myself to create a process and tooling to go along with it. With our new Technician&#39;s App having been put into use over the last six months, it felt proper to make a similarly simple and effective tool but instead for inventory auditing.</p> <p class="svelte-73e0z4">I knew that the key to making auditing as simple a task as possible was to utilize our barcodes and barcode scanners. In particular, I needed a way to select a location like a shelf and then be able to scan in multiple ID&#39;s at once. This wasn&#39;t something feasible using AppSheet but I knew it was something I could do using HTML and JavaScript. The part that would be a new challenge for me was connecting the web page to the back end Sheet. Building an API seemed like an obvious solution. API building was an area I didn&#39;t have much experience with before but I figured if I kept it simple and straightforward I could make it work. Unfortunately for me, I wasn&#39;t sure I&#39;d be able to use typical API tools. I had to construct this API primarily inside of Google App Script, which I wasn&#39;t super fond of.</p> <p class="svelte-73e0z4">This project would be very JS heavy so I also wanted to be able to patch and update code into the future. I decided to structure my development around using GitHub and Google&#39;s &quot;clasp&quot; which allowed me to move a lot of my code out of Google App Script&#39;s web based IDE and into my native environment using VS Code, which I prefer. At the end, I went for using a local Node.js deployment that I could spin up for only our local environment since this would be something we&#39;d only use when necessary.</p>',H,m,J='<h2 class="svelte-73e0z4">The Audit Flow</h2> <p class="svelte-73e0z4">In general, the audit would consist of entering and scanning every computer in our inventory and compare our input to what the inventory claimed to say. It seemed important that this tool be made once and be used for as long as possible so I aimed to design it to be relatively quick to use but also to be completed over at least a week of time. We might have thousands of computers in inventory at once so one can&#39;t be sure of how long an audit might take.</p> <p class="svelte-73e0z4">First a user would need to initiate an audit. Then, the user would scan a location and every computer in that location. After scanning everything, the user would initiate the reconciliation process. In reconciliation, the app would show the user discrepancies between what&#39;s been scanned and what hasn&#39;t. After reconciling the inventory, the user can complete the audit which saves a copy of every computer that was left missing. At audit completion, the program updates the active inventory with everything that was found and accounted for and removes everything that wasn&#39;t.</p>',E,f,V=`<img src="${pe}" alt="List of optional requests to the API"/> <p>List of API requests for major app functions.</p>`,j,v,K='<h2 class="svelte-73e0z4">The Front End</h2> <p class="svelte-73e0z4">My main goal was to find a way to use our barcode scanners for the majority of this process. After fiddling with some JavaScript, I found I could adjust some of the &quot;key&quot; events to prevent submitting or shifting focus from input fields. Knowing this, I knew I&#39;d have to deploy a web app of some kind so I decided I&#39;d build the site with my favorite web framework, Sveltekit. Sveltekit felt like a great choice because its syntax is very simple, makes MPAs simple to build and is one framework I&#39;m most familiar with. I didn&#39;t want to spend too much time if I could avoid it.</p> <p class="svelte-73e0z4">I used tailwindcss and DaisyUI for styling the site. I liked that DaisyUI had some basic themes and different styled components I could use right off the get go and this seemed like a good opportunity to try using it on a project. I&#39;ve been pretty happy using tailwind for the last year now because I find styling a much faster process with it. Now, this wasn&#39;t going to be anything incredible, more functional than anything. I did want to make sure I used styles to help emphasize certain data and certain actions that the user could take. While beauty in the page is important, what was more important to me was making information on the screen clear.</p>',P,y,Q=`<img src="${me}" alt="Example of back end svelte code"/> <p>Sveltekit simplified setting up requests to the API on the front end.</p>`,R,w,X='<h2 class="svelte-73e0z4">API From Scratch</h2> <p class="svelte-73e0z4">I&#39;d never really built an API until this project and what&#39;s more was that I wasn&#39;t connecting it to a proper database. This was only a series of Google Sheets so I used whatever tools would simplify interacting with Sheets. The result was an API built from scratch using Google Apps Script and their connected Sheets and Drive API&#39;s. It&#39;s hardly the way I wanted to make it but it&#39;s what seemed the most straightforward.</p> <p class="svelte-73e0z4">Before I even began making endpoints and special queries, I started by constructing Sheets and functions to initiate an audit, save the state of the audit, log actions taken during the audit (especially for debugging), and copy the Inventory. After getting some of the foundation built, I plotted out each step of the audit process and built it step by step.</p>',G,g,Y='<h2 class="svelte-73e0z4">Version Control and &quot;clasp&quot;</h2> <p class="svelte-73e0z4">I knew that I&#39;d have to write a ton of code for this process and I figured that I&#39;d be bound to make some mistakes that would need patched later on. This was actually a little complicated because part of my code would rest in Google Apps Script. Luckily, I found the tool &quot;clasp&quot; which is a command line tool specifically made for my use case, building Apps Script projects in my local environment. This allowed me not only to push all my code easily into GitHub, but it also gave me an easy way to deploy new versions of my API after making updates.</p> <p class="svelte-73e0z4">The result was a few scripts that I made to simplify updating my dev API with new code that I could instantly test in my dev environment. This also required me to create a dev environment that had unique settings separate from my production environment. Due to this having to interact with our actual inventory, it was important to handle my testing on a mock inventory before using the code on the real thing. It took a little bit of setup but ultimately was a fairly simple thing to build.</p>',D,I,Z='<h2 class="svelte-73e0z4">Testing and Insomnia</h2> <p class="svelte-73e0z4">I had to do a bit of custom testing since Google Apps Script was my API. There is no formal testing library from Google and I doubted anyone would do much more to this app after me so I decided to forgo automated tests. Most of my tests were fairly small and simple to verify my outputs. For my endpoints, I used Insomnia to test my requests and responses. I actually really enjoyed it especially compared to Postman, it felt simpler and cleaner in comparison.</p> <p class="svelte-73e0z4">For much of my code, consistent small tests helped me write code in logical chunks. It was noticeable how I began to shift my code into logical, data manipulations and procedures. It definitely cleaned up my code, even driving me to use some class style code to group certain areas of code into a class, but instead trying to use JavaScript&#39;s prototypes. In this project, I had to house my code in classes/objects due to Google App Script exposing every file into the global scope.</p>',W,b,ee='<h2 class="svelte-73e0z4">Deploying With Node</h2> <p class="svelte-73e0z4">Because we&#39;re a used computer company, I figured we could just host the site on our own. We wouldn&#39;t be doing audits every hour and I also didn&#39;t want to leave our audit tool potentially open to the internet. I decided to deploy the site using Node.js on a spare computer we had with a quick way to spin it up and shut it down. We opened a local network port specifically for it and now turn the site on whenver it&#39;s time to audit. Another great experience for me because I&#39;ve never really had the chance to deploy a local site before. I can see how the complexity would encourage most devs to using our many online deployment services. Lucky for me, Sveltekit has a fairly easy to use adapter system for deploying to different platforms.</p> <p class="svelte-73e0z4">It also really paid off to have setup environment specific settings for this stage. With a few variable changes, my site and API were setup for production.</p>',N,k,te=`<img src="${fe}" alt="Sheet connecting function example"/> <p>With this function, going between dev and producting environments was extremely simple.</p>`,U,T,se='<h2 class="svelte-73e0z4">Project Takeaways</h2> <p class="svelte-73e0z4">I think the major takeaways were all aspects that paid off over the long term. I realized that the beginnings to a project are incredibly time consuming, laying out the structure and fundamental pieces of code. But I also learned that if you think through your needs early on, it becomes much, much easier to work later on by several orders of magnitude. In fact, a month after deployment, I added an extra feature to &quot;quick audit&quot; some individual locations. I was surprised at how easy it was to add this feature because I was able to branch off of the master and switch back into dev mode, diving right back into the code. All of my links were housed in one ordered place and by simply switching one variable, all dependant functions were making requests to the correct paths.</p> <p class="svelte-73e0z4">I also plotted a path to a reasonable Minimum Viable Product. There&#39;s never enough time to finish something so I tried my best to lay out the most important functions of the app. While the site itself didn&#39;t look the greatest, it handled all the basic use cases that I required and it was deployed within a month. I had the vast majority of what was needed built and set myself up to make improvements later on. In the case of this project, I didn&#39;t do much enhancement afterwards besides a few bug fixes and an added feature but I know I&#39;m set to jump into this project at any point in the future to make improvements. This has been a crucial lesson in helping me charge forward into a first working version that I can build on. It builds momentum and is the real heart of software development.</p>';return{c(){e=o("div"),c=o("header"),c.textContent=z,L=n(),u=o("article"),u.innerHTML=F,_=n(),x=o("section"),d=o("img"),M=n(),h=o("section"),h.innerHTML=$,q=n(),p=o("article"),p.innerHTML=B,H=n(),m=o("article"),m.innerHTML=J,E=n(),f=o("section"),f.innerHTML=V,j=n(),v=o("article"),v.innerHTML=K,P=n(),y=o("section"),y.innerHTML=Q,R=n(),w=o("article"),w.innerHTML=X,G=n(),g=o("article"),g.innerHTML=Y,D=n(),I=o("article"),I.innerHTML=Z,W=n(),b=o("article"),b.innerHTML=ee,N=n(),k=o("section"),k.innerHTML=te,U=n(),T=o("article"),T.innerHTML=se,this.h()},l(A){e=i(A,"DIV",{class:!0});var t=ne(e);c=i(t,"HEADER",{class:!0,"data-svelte-h":!0}),l(c)!=="svelte-fqrqpi"&&(c.textContent=z),L=r(t),u=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(u)!=="svelte-1u4ye6l"&&(u.innerHTML=F),_=r(t),x=i(t,"SECTION",{class:!0});var ae=ne(x);d=i(ae,"IMG",{src:!0,alt:!0}),ae.forEach(O),M=r(t),h=i(t,"SECTION",{class:!0,"data-svelte-h":!0}),l(h)!=="svelte-1j13d46"&&(h.innerHTML=$),q=r(t),p=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(p)!=="svelte-owfhst"&&(p.innerHTML=B),H=r(t),m=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(m)!=="svelte-1qdy74i"&&(m.innerHTML=J),E=r(t),f=i(t,"SECTION",{class:!0,"data-svelte-h":!0}),l(f)!=="svelte-1joao8j"&&(f.innerHTML=V),j=r(t),v=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(v)!=="svelte-w7pzpc"&&(v.innerHTML=K),P=r(t),y=i(t,"SECTION",{class:!0,"data-svelte-h":!0}),l(y)!=="svelte-1feiimr"&&(y.innerHTML=Q),R=r(t),w=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(w)!=="svelte-1sblaz6"&&(w.innerHTML=X),G=r(t),g=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(g)!=="svelte-pi72ad"&&(g.innerHTML=Y),D=r(t),I=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(I)!=="svelte-1qq4q5i"&&(I.innerHTML=Z),W=r(t),b=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(b)!=="svelte-1o8wspv"&&(b.innerHTML=ee),N=r(t),k=i(t,"SECTION",{class:!0,"data-svelte-h":!0}),l(k)!=="svelte-1ay3pc3"&&(k.innerHTML=te),U=r(t),T=i(t,"ARTICLE",{class:!0,"data-svelte-h":!0}),l(T)!=="svelte-4n8wyp"&&(T.innerHTML=se),t.forEach(O),this.h()},h(){a(c,"class","text-4xl font-bold"),a(u,"class","svelte-73e0z4"),oe(d.src,C=S[0].portfolio.reuseAuditApp.coverImg)||a(d,"src",C),a(d,"alt","ReUse Audit App Dashboard"),a(x,"class","special-box svelte-73e0z4"),a(h,"class","special-box svelte-73e0z4"),a(p,"class","svelte-73e0z4"),a(m,"class","svelte-73e0z4"),a(f,"class","special-box space-y-8 text-center svelte-73e0z4"),a(v,"class","svelte-73e0z4"),a(y,"class","special-box space-y-8 text-center svelte-73e0z4"),a(w,"class","svelte-73e0z4"),a(g,"class","svelte-73e0z4"),a(I,"class","svelte-73e0z4"),a(b,"class","svelte-73e0z4"),a(k,"class","special-box space-y-8 text-center svelte-73e0z4"),a(T,"class","svelte-73e0z4"),a(e,"class","flex flex-col justify-center w-full mx-auto my-6 p-4 max-w-3xl 2xl:max-w-[80rem] space-y-8")},m(A,t){ue(A,e,t),s(e,c),s(e,L),s(e,u),s(e,_),s(e,x),s(x,d),s(e,M),s(e,h),s(e,q),s(e,p),s(e,H),s(e,m),s(e,E),s(e,f),s(e,j),s(e,v),s(e,P),s(e,y),s(e,R),s(e,w),s(e,G),s(e,g),s(e,D),s(e,I),s(e,W),s(e,b),s(e,N),s(e,k),s(e,U),s(e,T)},p(A,[t]){t&1&&!oe(d.src,C=A[0].portfolio.reuseAuditApp.coverImg)&&a(d,"src",C)},i:ie,o:ie,d(A){A&&O(e)}}}function ye(S,e,c){let z;return re(S,he,L=>c(0,z=L)),[z]}class be extends ce{constructor(e){super(),de(this,e,ye,ve,le,{})}}export{be as component};
